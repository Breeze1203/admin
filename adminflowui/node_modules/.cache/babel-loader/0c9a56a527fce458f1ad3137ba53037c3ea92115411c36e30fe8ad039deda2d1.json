{"ast":null,"code":"import axios from \"axios\";\nimport router from \"../router\";\nimport { ElMessage } from 'element-plus';\nimport { getCookie } from \"@/util/cookieUtil\";\nconst errorHandle = status => {\n  switch (status) {\n    case 400:\n      ElMessage.error(\"语义有误\");\n      break;\n    case 403:\n      ElMessage.error(\"请重新登录授权\");\n      router.replace('/');\n      break;\n    case 404:\n      break;\n    case 500:\n      break;\n    case 502:\n      ElMessage.error(\"服务器无响应\");\n      break;\n    default:\n      break;\n  }\n};\n// 创建一个axios的实例\nconst instance = axios.create({\n  // 网络请求的公共配置信息\n  baseURL: '/api',\n  timeout: 50000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\ninstance.interceptors.request.use(config => {\n  if (sessionStorage.getItem(\"user\") !== null) {\n    let user = JSON.parse(sessionStorage.getItem(\"user\"));\n    let token = getCookie(user.username + 'token');\n    config.headers[\"Authorization\"] = token;\n  }\n  return config;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(success => {\n  if (success.data.hasOwnProperty(\"code\")) {\n    console.log(success.data.code);\n    errorHandle(success.data.code);\n  }\n  return success;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 导出网络实例\nexport default instance;","map":{"version":3,"names":["axios","router","ElMessage","getCookie","errorHandle","status","error","replace","instance","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","sessionStorage","getItem","user","JSON","parse","token","username","response","Promise","reject","success","data","hasOwnProperty","console","log","code"],"sources":["/Users/pt/Documents/code/adminflowui/src/util/axiosUtil.js"],"sourcesContent":["import axios from \"axios\";\nimport router from \"../router\";\nimport {ElMessage} from 'element-plus';\nimport {getCookie} from \"@/util/cookieUtil\";\n\nconst errorHandle = (status) => {\n    switch (status) {\n        case 400:\n            ElMessage.error(\"语义有误\");\n            break;\n        case 403:\n            ElMessage.error(\"请重新登录授权\");\n            router.replace('/');\n            break;\n        case 404:\n            break;\n        case 500:\n            break;\n        case 502:\n            ElMessage.error(\"服务器无响应\");\n            break;\n        default:\n            break;\n    }\n}\n// 创建一个axios的实例\nconst instance = axios.create({\n    // 网络请求的公共配置信息\n    baseURL: '/api',\n    timeout: 50000,\n    withCredentials: true,\n    headers: {'Content-Type': 'application/json'}\n})\n\n\ninstance.interceptors.request.use(\n    config => {\n        if (sessionStorage.getItem(\"user\") !== null) {\n            let user = JSON.parse(sessionStorage.getItem(\"user\"));\n            let token = getCookie(user.username + 'token');\n            config.headers[\"Authorization\"] = token;\n        }\n        return config;\n    },\n    error => {\n        errorHandle(error.response.status);\n        return Promise.reject(error);\n    }\n);\n\n\n\ninstance.interceptors.response.use(\n    success => {\n        if(success.data.hasOwnProperty(\"code\")){\n            console.log(success.data.code);\n            errorHandle(success.data.code);\n        }\n        return success;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n)\n\n// 导出网络实例\nexport default instance;\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,SAAS,QAAO,mBAAmB;AAE3C,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC5B,QAAQA,MAAM;IACV,KAAK,GAAG;MACJH,SAAS,CAACI,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;MAC1BL,MAAM,CAACM,OAAO,CAAC,GAAG,CAAC;MACnB;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJL,SAAS,CAACI,KAAK,CAAC,QAAQ,CAAC;MACzB;IACJ;MACI;EACR;AACJ,CAAC;AACD;AACA,MAAME,QAAQ,GAAGR,KAAK,CAACS,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IAAC,cAAc,EAAE;EAAkB;AAChD,CAAC,CAAC;AAGFL,QAAQ,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,IAAIC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;IACzC,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAII,KAAK,GAAGpB,SAAS,CAACiB,IAAI,CAACI,QAAQ,GAAG,OAAO,CAAC;IAC9CP,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAGU,KAAK;EAC3C;EACA,OAAON,MAAM;AACjB,CAAC,EACDX,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACmB,QAAQ,CAACpB,MAAM,CAAC;EAClC,OAAOqB,OAAO,CAACC,MAAM,CAACrB,KAAK,CAAC;AAChC,CACJ,CAAC;AAIDE,QAAQ,CAACM,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BY,OAAO,IAAI;EACP,IAAGA,OAAO,CAACC,IAAI,CAACC,cAAc,CAAC,MAAM,CAAC,EAAC;IACnCC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACC,IAAI,CAACI,IAAI,CAAC;IAC9B7B,WAAW,CAACwB,OAAO,CAACC,IAAI,CAACI,IAAI,CAAC;EAClC;EACA,OAAOL,OAAO;AAClB,CAAC,EACDtB,KAAK,IAAI;EACL,OAAOoB,OAAO,CAACC,MAAM,CAACrB,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,eAAeE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}