{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"../router\";\nimport { ElMessage } from 'element-plus';\nimport { getCookie } from \"@/util/cookieUtil\";\nconst errorHandle = status => {\n  switch (status) {\n    case 400:\n      ElMessage.error(\"语义有误\");\n      break;\n    case 401:\n      ElMessage.error(\"请进行登录授权\");\n      break;\n    case 403:\n      break;\n    case 404:\n      break;\n    case 500:\n      ElMessage.error(\"服务器遇到意外\");\n      break;\n    case 502:\n      ElMessage.error(\"服务器无响应\");\n      break;\n    default:\n      break;\n  }\n};\n// 创建一个axios的实例\nconst instance = axios.create({\n  // 网络请求的公共配置信息\n  baseURL: '/api',\n  timeout: 50000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nlet isFirstRequest = true; // 添加一个标志变量用于标识是否为第一个请求\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(config => {\n  if (sessionStorage.getItem(\"user\") !== null) {\n    let user = JSON.parse(sessionStorage.getItem(\"user\"));\n    let token = getCookie(user.username + 'token');\n    // 当token不为null时，将其添加到请求头里面\n    if (token == null) {\n      ElMessage.error(\"会话过期，请重新登录\");\n      router.push('/');\n      sessionStorage.removeItem(\"user\");\n      return;\n    } else {\n      config.headers[\"Authorization\"] = token;\n    }\n  }\n  return config;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\n\n// 响应\ninstance.interceptors.response.use(success => {\n  return success;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 导出网络实例\nexport default instance;","map":{"version":3,"names":["axios","router","ElMessage","getCookie","errorHandle","status","error","instance","create","baseURL","timeout","withCredentials","headers","isFirstRequest","interceptors","request","use","config","sessionStorage","getItem","user","JSON","parse","token","username","push","removeItem","response","Promise","reject","success"],"sources":["/Users/pt/Documents/code/adminflowui/src/util/axiosUtil.js"],"sourcesContent":["import axios from \"axios\";\nimport router from \"../router\";\nimport {ElMessage} from 'element-plus';\nimport {getCookie} from \"@/util/cookieUtil\";\n\nconst errorHandle = (status) => {\n    switch (status) {\n        case 400:\n            ElMessage.error(\"语义有误\");\n            break;\n        case 401:\n            ElMessage.error(\"请进行登录授权\");\n            break;\n        case 403:\n            break;\n        case 404:\n            break;\n        case 500:\n            ElMessage.error(\"服务器遇到意外\");\n            break;\n        case 502:\n            ElMessage.error(\"服务器无响应\");\n            break;\n        default:\n            break;\n    }\n}\n// 创建一个axios的实例\nconst instance = axios.create({\n    // 网络请求的公共配置信息\n    baseURL: '/api',\n    timeout: 50000,\n    withCredentials: true,\n    headers: {'Content-Type': 'application/json'}\n})\nlet isFirstRequest = true; // 添加一个标志变量用于标识是否为第一个请求\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(\n    config => {\n        if (sessionStorage.getItem(\"user\")!== null) {\n            let user = JSON.parse(sessionStorage.getItem(\"user\"));\n            let token = getCookie(user.username + 'token');\n            // 当token不为null时，将其添加到请求头里面\n            if (token == null) {\n                ElMessage.error(\"会话过期，请重新登录\");\n                router.push('/');\n                sessionStorage.removeItem(\"user\");\n                return ;\n            }else{\n                config.headers[\"Authorization\"] = token;\n            }\n        }\n        return config\n    },\n    error => {\n        errorHandle(error.response.status)\n        return Promise.reject(error)\n    }\n)\n\n// 响应\ninstance.interceptors.response.use(\n    success => {\n        return success;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n)\n\n// 导出网络实例\nexport default instance;\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,SAAS,QAAO,mBAAmB;AAE3C,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC5B,QAAQA,MAAM;IACV,KAAK,GAAG;MACJH,SAAS,CAACI,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;MAC1B;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;MAC1B;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,QAAQ,CAAC;MACzB;IACJ;MACI;EACR;AACJ,CAAC;AACD;AACA,MAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IAAC,cAAc,EAAE;EAAkB;AAChD,CAAC,CAAC;AACF,IAAIC,cAAc,GAAG,IAAI,CAAC,CAAC;;AAE3B;AACAN,QAAQ,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,IAAIC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,KAAI,IAAI,EAAE;IACxC,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAII,KAAK,GAAGpB,SAAS,CAACiB,IAAI,CAACI,QAAQ,GAAG,OAAO,CAAC;IAC9C;IACA,IAAID,KAAK,IAAI,IAAI,EAAE;MACfrB,SAAS,CAACI,KAAK,CAAC,YAAY,CAAC;MAC7BL,MAAM,CAACwB,IAAI,CAAC,GAAG,CAAC;MAChBP,cAAc,CAACQ,UAAU,CAAC,MAAM,CAAC;MACjC;IACJ,CAAC,MAAI;MACDT,MAAM,CAACL,OAAO,CAAC,eAAe,CAAC,GAAGW,KAAK;IAC3C;EACJ;EACA,OAAON,MAAM;AACjB,CAAC,EACDX,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACqB,QAAQ,CAACtB,MAAM,CAAC;EAClC,OAAOuB,OAAO,CAACC,MAAM,CAACvB,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAC,QAAQ,CAACO,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC9Bc,OAAO,IAAI;EACP,OAAOA,OAAO;AAClB,CAAC,EACDxB,KAAK,IAAI;EACL,OAAOsB,OAAO,CAACC,MAAM,CAACvB,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,eAAeC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}