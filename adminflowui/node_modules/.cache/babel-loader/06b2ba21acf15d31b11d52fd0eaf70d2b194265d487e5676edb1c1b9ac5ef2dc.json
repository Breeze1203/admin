{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"../router\";\nimport { ElMessage } from 'element-plus';\nimport { getCookie } from \"@/util/cookieUtil\";\nconst errorHandle = status => {\n  switch (status) {\n    case 400:\n      ElMessage.error(\"语义有误\");\n      break;\n    case 401:\n      ElMessage.error(\"请进行登录授权\");\n      break;\n    case 403:\n      ElMessage.warning(\"会话过期，请重新登录\");\n      router.replace(\"/\");\n      break;\n    case 404:\n      break;\n    case 500:\n      ElMessage.error(\"服务器遇到意外\");\n      break;\n    case 502:\n      ElMessage.error(\"服务器无响应\");\n      break;\n    default:\n      break;\n  }\n};\n// 创建一个axios的实例\nconst instance = axios.create({\n  // 网络请求的公共配置信息\n  baseURL: '/api',\n  timeout: 50000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(config => {\n  if (JSON.parse(sessionStorage.getItem(\"user\")) != null) {\n    let user = JSON.parse(sessionStorage.getItem(\"user\"));\n    let token = getCookie(user.username + 'token');\n    // 当token不为null时，将其添加到请求头里面\n    if (token != null) {\n      config.headers[\"Authorization\"] = token;\n    }\n  }\n  return config;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\n\n// 响应\ninstance.interceptors.response.use(success => {\n  return success;\n}, error => {\n  if (error.response.status === 403) {\n    sessionStorage.removeItem(\"user\");\n    ElMessage.info(\"会话过期，请重新登录\");\n    router.push('/');\n  } else if (error.response.status === 401) {\n    ElMessage.error(\"请进行登录授权\");\n  }\n});\n\n// 导出网络实例\nexport default instance;","map":{"version":3,"names":["axios","router","ElMessage","getCookie","errorHandle","status","error","warning","replace","instance","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","JSON","parse","sessionStorage","getItem","user","token","username","response","Promise","reject","success","removeItem","info","push"],"sources":["/Users/pt/Documents/code/adminflowui/src/util/axiosUtil.js"],"sourcesContent":["import axios from \"axios\";\nimport router from \"../router\";\nimport {ElMessage} from 'element-plus';\nimport {getCookie} from \"@/util/cookieUtil\";\n\nconst errorHandle = (status) => {\n    switch (status) {\n        case 400:\n            ElMessage.error(\"语义有误\");\n            break;\n        case 401:\n            ElMessage.error(\"请进行登录授权\");\n            break;\n        case 403:\n            ElMessage.warning(\"会话过期，请重新登录\")\n            router.replace(\"/\")\n            break;\n        case 404:\n            break;\n        case 500:\n            ElMessage.error(\"服务器遇到意外\");\n            break;\n        case 502:\n            ElMessage.error(\"服务器无响应\");\n            break;\n        default:\n            break;\n    }\n}\n// 创建一个axios的实例\nconst instance = axios.create({\n    // 网络请求的公共配置信息\n    baseURL: '/api',\n    timeout: 50000,\n    withCredentials: true,\n    headers: {'Content-Type': 'application/json'}\n})\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(\n    config => {\n        if (JSON.parse(sessionStorage.getItem(\"user\")) != null) {\n            let user = JSON.parse(sessionStorage.getItem(\"user\"));\n            let token = getCookie(user.username + 'token');\n            // 当token不为null时，将其添加到请求头里面\n            if (token != null) {\n                config.headers[\"Authorization\"] = token;\n            }\n        }\n        return config\n    },\n    error => {\n        errorHandle(error.response.status)\n        return Promise.reject(error)\n    }\n)\n\n// 响应\ninstance.interceptors.response.use(\n    success => {\n        return success;\n    },\n    error => {\n        if (error.response.status === 403) {\n            sessionStorage.removeItem(\"user\");\n            ElMessage.info(\"会话过期，请重新登录\");\n            router.push('/');\n        } else if (error.response.status === 401) {\n            ElMessage.error(\"请进行登录授权\");\n        }\n    }\n)\n\n// 导出网络实例\nexport default instance;\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,SAAS,QAAO,mBAAmB;AAE3C,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC5B,QAAQA,MAAM;IACV,KAAK,GAAG;MACJH,SAAS,CAACI,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;MAC1B;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACK,OAAO,CAAC,YAAY,CAAC;MAC/BN,MAAM,CAACO,OAAO,CAAC,GAAG,CAAC;MACnB;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJN,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;MAC1B;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,QAAQ,CAAC;MACzB;IACJ;MACI;EACR;AACJ,CAAC;AACD;AACA,MAAMG,QAAQ,GAAGT,KAAK,CAACU,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IAAC,cAAc,EAAE;EAAkB;AAChD,CAAC,CAAC;;AAEF;AACAL,QAAQ,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,IAAIC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,EAAE;IACpD,IAAIC,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAIE,KAAK,GAAGrB,SAAS,CAACoB,IAAI,CAACE,QAAQ,GAAG,OAAO,CAAC;IAC9C;IACA,IAAID,KAAK,IAAI,IAAI,EAAE;MACfN,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAGU,KAAK;IAC3C;EACJ;EACA,OAAON,MAAM;AACjB,CAAC,EACDZ,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACoB,QAAQ,CAACrB,MAAM,CAAC;EAClC,OAAOsB,OAAO,CAACC,MAAM,CAACtB,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAG,QAAQ,CAACM,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BY,OAAO,IAAI;EACP,OAAOA,OAAO;AAClB,CAAC,EACDvB,KAAK,IAAI;EACL,IAAIA,KAAK,CAACoB,QAAQ,CAACrB,MAAM,KAAK,GAAG,EAAE;IAC/BgB,cAAc,CAACS,UAAU,CAAC,MAAM,CAAC;IACjC5B,SAAS,CAAC6B,IAAI,CAAC,YAAY,CAAC;IAC5B9B,MAAM,CAAC+B,IAAI,CAAC,GAAG,CAAC;EACpB,CAAC,MAAM,IAAI1B,KAAK,CAACoB,QAAQ,CAACrB,MAAM,KAAK,GAAG,EAAE;IACtCH,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;EAC9B;AACJ,CACJ,CAAC;;AAED;AACA,eAAeG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}